// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/pongsakorn-maker/video-on-demand/ent/predicate"
	"github.com/pongsakorn-maker/video-on-demand/ent/user"
	"github.com/pongsakorn-maker/video-on-demand/ent/video"
)

// VideoUpdate is the builder for updating Video entities.
type VideoUpdate struct {
	config
	hooks      []Hook
	mutation   *VideoMutation
	predicates []predicate.Video
}

// Where adds a new predicate for the builder.
func (vu *VideoUpdate) Where(ps ...predicate.Video) *VideoUpdate {
	vu.predicates = append(vu.predicates, ps...)
	return vu
}

// SetTitle sets the title field.
func (vu *VideoUpdate) SetTitle(s string) *VideoUpdate {
	vu.mutation.SetTitle(s)
	return vu
}

// SetDescription sets the description field.
func (vu *VideoUpdate) SetDescription(s string) *VideoUpdate {
	vu.mutation.SetDescription(s)
	return vu
}

// SetURL sets the url field.
func (vu *VideoUpdate) SetURL(s string) *VideoUpdate {
	vu.mutation.SetURL(s)
	return vu
}

// SetImgurl sets the imgurl field.
func (vu *VideoUpdate) SetImgurl(s string) *VideoUpdate {
	vu.mutation.SetImgurl(s)
	return vu
}

// SetTimestamp sets the timestamp field.
func (vu *VideoUpdate) SetTimestamp(t time.Time) *VideoUpdate {
	vu.mutation.SetTimestamp(t)
	return vu
}

// SetNillableTimestamp sets the timestamp field if the given value is not nil.
func (vu *VideoUpdate) SetNillableTimestamp(t *time.Time) *VideoUpdate {
	if t != nil {
		vu.SetTimestamp(*t)
	}
	return vu
}

// SetOwnerID sets the owner edge to User by id.
func (vu *VideoUpdate) SetOwnerID(id int) *VideoUpdate {
	vu.mutation.SetOwnerID(id)
	return vu
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (vu *VideoUpdate) SetNillableOwnerID(id *int) *VideoUpdate {
	if id != nil {
		vu = vu.SetOwnerID(*id)
	}
	return vu
}

// SetOwner sets the owner edge to User.
func (vu *VideoUpdate) SetOwner(u *User) *VideoUpdate {
	return vu.SetOwnerID(u.ID)
}

// Mutation returns the VideoMutation object of the builder.
func (vu *VideoUpdate) Mutation() *VideoMutation {
	return vu.mutation
}

// ClearOwner clears the owner edge to User.
func (vu *VideoUpdate) ClearOwner() *VideoUpdate {
	vu.mutation.ClearOwner()
	return vu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (vu *VideoUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := vu.mutation.Title(); ok {
		if err := video.TitleValidator(v); err != nil {
			return 0, &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := vu.mutation.Description(); ok {
		if err := video.DescriptionValidator(v); err != nil {
			return 0, &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if v, ok := vu.mutation.URL(); ok {
		if err := video.URLValidator(v); err != nil {
			return 0, &ValidationError{Name: "url", err: fmt.Errorf("ent: validator failed for field \"url\": %w", err)}
		}
	}
	if v, ok := vu.mutation.Imgurl(); ok {
		if err := video.ImgurlValidator(v); err != nil {
			return 0, &ValidationError{Name: "imgurl", err: fmt.Errorf("ent: validator failed for field \"imgurl\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VideoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VideoUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VideoUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VideoUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VideoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   video.Table,
			Columns: video.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: video.FieldID,
			},
		},
	}
	if ps := vu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldTitle,
		})
	}
	if value, ok := vu.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldDescription,
		})
	}
	if value, ok := vu.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldURL,
		})
	}
	if value, ok := vu.mutation.Imgurl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldImgurl,
		})
	}
	if value, ok := vu.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: video.FieldTimestamp,
		})
	}
	if vu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.OwnerTable,
			Columns: []string{video.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.OwnerTable,
			Columns: []string{video.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// VideoUpdateOne is the builder for updating a single Video entity.
type VideoUpdateOne struct {
	config
	hooks    []Hook
	mutation *VideoMutation
}

// SetTitle sets the title field.
func (vuo *VideoUpdateOne) SetTitle(s string) *VideoUpdateOne {
	vuo.mutation.SetTitle(s)
	return vuo
}

// SetDescription sets the description field.
func (vuo *VideoUpdateOne) SetDescription(s string) *VideoUpdateOne {
	vuo.mutation.SetDescription(s)
	return vuo
}

// SetURL sets the url field.
func (vuo *VideoUpdateOne) SetURL(s string) *VideoUpdateOne {
	vuo.mutation.SetURL(s)
	return vuo
}

// SetImgurl sets the imgurl field.
func (vuo *VideoUpdateOne) SetImgurl(s string) *VideoUpdateOne {
	vuo.mutation.SetImgurl(s)
	return vuo
}

// SetTimestamp sets the timestamp field.
func (vuo *VideoUpdateOne) SetTimestamp(t time.Time) *VideoUpdateOne {
	vuo.mutation.SetTimestamp(t)
	return vuo
}

// SetNillableTimestamp sets the timestamp field if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableTimestamp(t *time.Time) *VideoUpdateOne {
	if t != nil {
		vuo.SetTimestamp(*t)
	}
	return vuo
}

// SetOwnerID sets the owner edge to User by id.
func (vuo *VideoUpdateOne) SetOwnerID(id int) *VideoUpdateOne {
	vuo.mutation.SetOwnerID(id)
	return vuo
}

// SetNillableOwnerID sets the owner edge to User by id if the given value is not nil.
func (vuo *VideoUpdateOne) SetNillableOwnerID(id *int) *VideoUpdateOne {
	if id != nil {
		vuo = vuo.SetOwnerID(*id)
	}
	return vuo
}

// SetOwner sets the owner edge to User.
func (vuo *VideoUpdateOne) SetOwner(u *User) *VideoUpdateOne {
	return vuo.SetOwnerID(u.ID)
}

// Mutation returns the VideoMutation object of the builder.
func (vuo *VideoUpdateOne) Mutation() *VideoMutation {
	return vuo.mutation
}

// ClearOwner clears the owner edge to User.
func (vuo *VideoUpdateOne) ClearOwner() *VideoUpdateOne {
	vuo.mutation.ClearOwner()
	return vuo
}

// Save executes the query and returns the updated entity.
func (vuo *VideoUpdateOne) Save(ctx context.Context) (*Video, error) {
	if v, ok := vuo.mutation.Title(); ok {
		if err := video.TitleValidator(v); err != nil {
			return nil, &ValidationError{Name: "title", err: fmt.Errorf("ent: validator failed for field \"title\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.Description(); ok {
		if err := video.DescriptionValidator(v); err != nil {
			return nil, &ValidationError{Name: "description", err: fmt.Errorf("ent: validator failed for field \"description\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.URL(); ok {
		if err := video.URLValidator(v); err != nil {
			return nil, &ValidationError{Name: "url", err: fmt.Errorf("ent: validator failed for field \"url\": %w", err)}
		}
	}
	if v, ok := vuo.mutation.Imgurl(); ok {
		if err := video.ImgurlValidator(v); err != nil {
			return nil, &ValidationError{Name: "imgurl", err: fmt.Errorf("ent: validator failed for field \"imgurl\": %w", err)}
		}
	}

	var (
		err  error
		node *Video
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VideoMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			mut = vuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VideoUpdateOne) SaveX(ctx context.Context) *Video {
	v, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query on the entity.
func (vuo *VideoUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VideoUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VideoUpdateOne) sqlSave(ctx context.Context) (v *Video, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   video.Table,
			Columns: video.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: video.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Video.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := vuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldTitle,
		})
	}
	if value, ok := vuo.mutation.Description(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldDescription,
		})
	}
	if value, ok := vuo.mutation.URL(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldURL,
		})
	}
	if value, ok := vuo.mutation.Imgurl(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: video.FieldImgurl,
		})
	}
	if value, ok := vuo.mutation.Timestamp(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: video.FieldTimestamp,
		})
	}
	if vuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.OwnerTable,
			Columns: []string{video.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := vuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   video.OwnerTable,
			Columns: []string{video.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	v = &Video{config: vuo.config}
	_spec.Assign = v.assignValues
	_spec.ScanValues = v.scanValues()
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{video.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return v, nil
}
